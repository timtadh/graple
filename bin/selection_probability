#!/usr/bin/env python

import sys
import os
import getopt
import json
import time

import numpy as np
from scipy import sparse
from scipy.sparse import linalg
from scikits import umfpack


USAGE = 'selection_probablities -m /path/to/matrices.json'
EXTENDED = '''
compute the selection probablities from the Q, R, u matrices

Options
    -h, --help                      print this message
    -m, --matrices=<path>           path to matrices.json
    -o, --output=<path>             path to write output
'''


def usage(code=None):
    '''Prints the usage and exits with an error code specified by code. If
    code is not given it exits with error_codes['usage']'''
    print USAGE
    if code is None:
        print EXTENDED
    else:
        code = 0
    sys.exit(code)

def log(*msgs):
    '''Log a message to the user'''
    for msg in msgs:
        print >>sys.stderr, str(msg),
    print >>sys.stderr
    sys.stderr.flush()

def assert_file_exists(path):
    '''checks if the file exists. If it doesn't causes the program to exit.
    @param path : path to file
    @returns : the abs path to the file (an echo) [only on success]
    '''
    path = os.path.abspath(os.path.expanduser(path))
    if not os.path.exists(path):
        log('No file found. "%(path)s"' % locals())
        usage(2)
    return path

def load(path, retry):
    print >>sys.stderr, path,
    with open(path) as f:
        j = json.load(f)
    Q = load_matrix((j['Q']['Rows'], j['Q']['Cols']), j['Q']['Entries'], retry)
    R = load_matrix((j['R']['Rows'], j['R']['Cols']), j['R']['Entries'], retry)
    u = load_matrix((j['u']['Rows'], j['u']['Cols']), j['u']['Entries'])
    return Q, R, u

def load_matrix(shape, entries, retry=False):
    if not retry:
        data = [float(e['Value']) for e in entries]
    else:
        data = [(float(e['Value']) if float(e['Value']) < .5 else .5) for e in entries]
    rows = [float(e['Row']) for e in entries]
    cols = [float(e['Col']) for e in entries]
    M = sparse.coo_matrix((data, (rows, cols)), shape).tocsc()
    assert len(data) == M.nnz
    return M

def probability(Q, R, u):
    print >>sys.stderr, Q.shape[0],
    I = sparse.eye(Q.shape[0], format=Q.format)
    print >>sys.stderr, "I",
    N = inverse(I - Q)
    print >>sys.stderr, "N",
    B = N.dot(R)
    print >>sys.stderr, "B",
    P = u.dot(B)
    print >>sys.stderr, "P",
    return P[0,0]

def inverse(A):
    # return linalg.inv(A)
    I = sparse.eye(A.shape[0], format=A.format)

    #lu = linalg.spilu(A)
    lu = umfpack.splu(A)
    print >>sys.stderr, "LU",
    return lusolve(lu, I)

    # return linalg.spsolve(A, I)

def lusolve(lu, B):
    if B.shape[0] < 30000:
        X = sparse.csc_matrix(lu.solve(B))
    else:
        cols = list()
        for j in xrange(B.shape[1]):
            if j % 1000 == 0:
                print >>sys.stderr, ("X_%d" % j),
            col = lu.solve(B[:,j])
            cols.append(sparse.csc_matrix(col))
        X = sparse.hstack(cols)
    print >>sys.stderr, "X",
    return X

def main(argv):
    try:
        opts, args = getopt.getopt(argv, "hm:o:",
            ["help","matrices=","output=", "retry"])
    except getopt.GetoptError, err:
        log(err)
        usage(1)

    matrices = None
    output = sys.stdout
    ex = None
    retry = False
    for opt, arg in opts:
        if opt in ('-h', '--help',):
            usage(0)
        elif opt in ('-m', '--matrices',):
            matrices = assert_file_exists(arg)
        elif opt in ('--retry',):
            retry = True
        elif opt in ('-o', '--output',):
            path = os.path.abspath(arg)
            expath = path + '.ex'
            if os.path.exists(expath) and os.stat(expath).st_size > 0:
                with open(expath) as f:
                    ex = float(f.read())
            elif os.path.exists(path) and os.stat(path).st_size > 0:
                log(path)
                log("cowardly refusing to overwrite output")
                sys.exit(0)
            output = open(path, 'w')
        else:
            log("unexpected option", opt, arg)
            usage(1)

    if matrices is None:
        log("must supply at least a path to the matrices.json")
        usage(1)

    with output as f:
        s = time.time()
        p = probability(*load(matrices, retry))
        e = time.time()
        print >>sys.stderr, round(p, 5),
        log("time", round(e-s, 3))
        if p > 1:
            log('ERROR', p, '>', 1)
        elif ex is not None and abs(p - ex) > .01:
            log('ERROR', p, '!=', ex)
        elif ex is not None:
            log("had example no output written")
        else:
            print >>f, p
            log("wrote output")

if __name__ == "__main__":
    main(sys.argv[1:])
